/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PaymentRouteImport } from './routes/payment'
import { Route as McpRouteImport } from './routes/mcp'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReflectionsNewRouteImport } from './routes/reflections/new'
import { Route as PaymentSuccessRouteImport } from './routes/payment/success'
import { Route as PaymentCancelRouteImport } from './routes/payment/cancel'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as ApiInngestRouteImport } from './routes/api/inngest'
import { Route as AdminPromptsRouteImport } from './routes/admin/prompts'
import { Route as ApiStripeWebhookRouteImport } from './routes/api/stripe/webhook'
import { Route as ApiStripeCreateCheckoutRouteImport } from './routes/api/stripe/create-checkout'

const PaymentRoute = PaymentRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any)
const McpRoute = McpRouteImport.update({
  id: '/mcp',
  path: '/mcp',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReflectionsNewRoute = ReflectionsNewRouteImport.update({
  id: '/reflections/new',
  path: '/reflections/new',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentSuccessRoute = PaymentSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => PaymentRoute,
} as any)
const PaymentCancelRoute = PaymentCancelRouteImport.update({
  id: '/cancel',
  path: '/cancel',
  getParentRoute: () => PaymentRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiInngestRoute = ApiInngestRouteImport.update({
  id: '/api/inngest',
  path: '/api/inngest',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPromptsRoute = AdminPromptsRouteImport.update({
  id: '/admin/prompts',
  path: '/admin/prompts',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiStripeWebhookRoute = ApiStripeWebhookRouteImport.update({
  id: '/api/stripe/webhook',
  path: '/api/stripe/webhook',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiStripeCreateCheckoutRoute = ApiStripeCreateCheckoutRouteImport.update({
  id: '/api/stripe/create-checkout',
  path: '/api/stripe/create-checkout',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/payment': typeof PaymentRouteWithChildren
  '/admin/prompts': typeof AdminPromptsRoute
  '/api/inngest': typeof ApiInngestRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/reflections/new': typeof ReflectionsNewRoute
  '/api/stripe/create-checkout': typeof ApiStripeCreateCheckoutRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/payment': typeof PaymentRouteWithChildren
  '/admin/prompts': typeof AdminPromptsRoute
  '/api/inngest': typeof ApiInngestRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/reflections/new': typeof ReflectionsNewRoute
  '/api/stripe/create-checkout': typeof ApiStripeCreateCheckoutRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/payment': typeof PaymentRouteWithChildren
  '/admin/prompts': typeof AdminPromptsRoute
  '/api/inngest': typeof ApiInngestRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/reflections/new': typeof ReflectionsNewRoute
  '/api/stripe/create-checkout': typeof ApiStripeCreateCheckoutRoute
  '/api/stripe/webhook': typeof ApiStripeWebhookRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/mcp'
    | '/payment'
    | '/admin/prompts'
    | '/api/inngest'
    | '/auth/sign-in'
    | '/payment/cancel'
    | '/payment/success'
    | '/reflections/new'
    | '/api/stripe/create-checkout'
    | '/api/stripe/webhook'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/mcp'
    | '/payment'
    | '/admin/prompts'
    | '/api/inngest'
    | '/auth/sign-in'
    | '/payment/cancel'
    | '/payment/success'
    | '/reflections/new'
    | '/api/stripe/create-checkout'
    | '/api/stripe/webhook'
  id:
    | '__root__'
    | '/'
    | '/mcp'
    | '/payment'
    | '/admin/prompts'
    | '/api/inngest'
    | '/auth/sign-in'
    | '/payment/cancel'
    | '/payment/success'
    | '/reflections/new'
    | '/api/stripe/create-checkout'
    | '/api/stripe/webhook'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  McpRoute: typeof McpRoute
  PaymentRoute: typeof PaymentRouteWithChildren
  AdminPromptsRoute: typeof AdminPromptsRoute
  ApiInngestRoute: typeof ApiInngestRoute
  AuthSignInRoute: typeof AuthSignInRoute
  ReflectionsNewRoute: typeof ReflectionsNewRoute
  ApiStripeCreateCheckoutRoute: typeof ApiStripeCreateCheckoutRoute
  ApiStripeWebhookRoute: typeof ApiStripeWebhookRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mcp': {
      id: '/mcp'
      path: '/mcp'
      fullPath: '/mcp'
      preLoaderRoute: typeof McpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reflections/new': {
      id: '/reflections/new'
      path: '/reflections/new'
      fullPath: '/reflections/new'
      preLoaderRoute: typeof ReflectionsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment/success': {
      id: '/payment/success'
      path: '/success'
      fullPath: '/payment/success'
      preLoaderRoute: typeof PaymentSuccessRouteImport
      parentRoute: typeof PaymentRoute
    }
    '/payment/cancel': {
      id: '/payment/cancel'
      path: '/cancel'
      fullPath: '/payment/cancel'
      preLoaderRoute: typeof PaymentCancelRouteImport
      parentRoute: typeof PaymentRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/inngest': {
      id: '/api/inngest'
      path: '/api/inngest'
      fullPath: '/api/inngest'
      preLoaderRoute: typeof ApiInngestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/prompts': {
      id: '/admin/prompts'
      path: '/admin/prompts'
      fullPath: '/admin/prompts'
      preLoaderRoute: typeof AdminPromptsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/stripe/webhook': {
      id: '/api/stripe/webhook'
      path: '/api/stripe/webhook'
      fullPath: '/api/stripe/webhook'
      preLoaderRoute: typeof ApiStripeWebhookRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/stripe/create-checkout': {
      id: '/api/stripe/create-checkout'
      path: '/api/stripe/create-checkout'
      fullPath: '/api/stripe/create-checkout'
      preLoaderRoute: typeof ApiStripeCreateCheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PaymentRouteChildren {
  PaymentCancelRoute: typeof PaymentCancelRoute
  PaymentSuccessRoute: typeof PaymentSuccessRoute
}

const PaymentRouteChildren: PaymentRouteChildren = {
  PaymentCancelRoute: PaymentCancelRoute,
  PaymentSuccessRoute: PaymentSuccessRoute,
}

const PaymentRouteWithChildren =
  PaymentRoute._addFileChildren(PaymentRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  McpRoute: McpRoute,
  PaymentRoute: PaymentRouteWithChildren,
  AdminPromptsRoute: AdminPromptsRoute,
  ApiInngestRoute: ApiInngestRoute,
  AuthSignInRoute: AuthSignInRoute,
  ReflectionsNewRoute: ReflectionsNewRoute,
  ApiStripeCreateCheckoutRoute: ApiStripeCreateCheckoutRoute,
  ApiStripeWebhookRoute: ApiStripeWebhookRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
